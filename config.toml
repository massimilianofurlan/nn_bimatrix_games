
[2x2_example]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 128
# loss
ex_ante = true
p = 2

[2x2_default]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 2

[3x3_default]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 3
n_layers = 8
hidden_dim = 2048
#loss
ex_ante = true
p = 2

[4x4_default]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 4
n_layers = 8
hidden_dim = 2048
#loss
ex_ante = true
p = 2

[5x5_default]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 5
n_layers = 8
hidden_dim = 2048
#loss
ex_ante = true
p = 2

[2x2_halved_neurons]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 256
# loss
ex_ante = true
p = 2

[2x2_doubled_neurons]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 1024
# loss
ex_ante = true
p = 2

[3x3_doubled_neurons]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 3
n_layers = 8
hidden_dim = 4096
#loss
ex_ante = true
p = 2


[2x2_halfsphere]
# bimatrix
payoffs_space = "halfsphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 2

[2x2_hemisphere]
# bimatrix
payoffs_space = "hemisphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 2

[2x2_expost_loss]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = false
p = 2

[2x2_linear_loss]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "general_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 1


[2x2_symmetric]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "symmetric"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 2

[3x3_symmetric]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "symmetric"
# neural network
model_class = "mlp"
n_actions = 3
n_layers = 8
hidden_dim = 2048
#loss
ex_ante = true
p = 2

[2x2_zerosum]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "zero_sum"
# neural network
model_class = "mlp"
n_actions = 2
n_layers = 8
hidden_dim = 512
# loss
ex_ante = true
p = 2

[3x3_zerosum]
# bimatrix
payoffs_space = "sphere_orthogonal"
game_class = "zero_sum"
# neural network
model_class = "mlp"
n_actions = 3
n_layers = 8
hidden_dim = 2048
#loss
ex_ante = true
p = 2
